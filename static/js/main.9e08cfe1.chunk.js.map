{"version":3,"sources":["store/loading.ts","store/message.ts","store/post.ts","helpers/api.ts","store/search.ts","store/isLoadCompleted.ts","store/index.ts","components/Start.tsx","CommentItem.tsx","CommentList.tsx","UserInfo.tsx","User.tsx","PostItem.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setMessage","message","posts","filter","post","id","postId","map","comments","comment","commentId","API_URL","getPostsFromServer","a","Promise","all","fetch","then","response","json","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","author","find","user","userId","query","isLoaded","rootReducer","combineReducers","loadingReducer","messageReducer","postsReducer","searchReducer","isLoadReducer","getIsLoading","state","getMessage","getIsLoaded","getFilteredPosts","title","body","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","className","onClick","disabled","CommentItem","name","email","deleteComment","CommentList","key","UserInfo","address","city","zipcode","street","suite","User","PostItem","PostList","App","role","length","onChange","event","value","target","Root","ReactDOM","render","document","getElementById"],"mappings":"gUAuBeA,EAbC,WAAyC,IAAxCC,EAAuC,wDAAtBC,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IATkB,gBAUhB,OAAO,EAET,IAXmB,iBAYjB,OAAO,EAET,QACE,OAAOF,ICbAG,EAAa,SAACC,GAAD,MAAsB,CAAEF,KAH9B,cAGiDE,YAYtDL,EAVC,WAAsC,IAArCK,EAAoC,uDAA1B,GAAIH,EAAsB,uCACnD,OAAQA,EAAOC,MACb,IAPgB,cAQd,OAAOD,EAAOG,QAEhB,QACE,OAAOA,I,OCmBEL,EAjBC,WAAiD,IAAhDM,EAA+C,uDAA1B,GAAIJ,EAAsB,uCAC9D,OAAQA,EAAOC,MACb,IAfc,YAgBZ,OAAOD,EAAOI,MAChB,IAhBgB,eAiBd,OAAOA,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOP,EAAOQ,UACjD,IAjBmB,kBAkBjB,OAAOJ,EAAMK,KAAI,SAAAH,GAAI,kCAChBA,GADgB,IAEnBI,SAAUJ,EAAKI,SACZL,QAAO,SAACM,GAAD,OAA2BA,EAAQJ,KAAOP,EAAOY,kBAE/D,QACE,OAAOR,I,QC7BPS,EAAU,iEAiBHC,EAAkB,uCAAG,sCAAAC,EAAA,sEACqCC,QAAQC,IAC3E,CAhBKC,MAAM,GAAD,OAAIL,EAAJ,gBACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAIL,EAAJ,gBACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAIL,EAAJ,mBACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAGG,0CACzBC,EADyB,KACRC,EADQ,KACSC,EADT,KAK1BC,EAAgBH,EAAgBb,KAAI,SAACH,GAAD,mBAAC,eACtCA,GADqC,IAExCI,SAAUc,EAAmBnB,QAAO,SAACM,GAAD,OAA2BA,EAAQH,SAAWF,EAAKC,MACvFmB,OAAQH,EAAgBI,MAAK,SAACC,GAAD,OAAqBA,EAAKrB,KAAOD,EAAKuB,eARrC,kBAWzBJ,GAXyB,2CAAH,qDCChB3B,EAVC,WAAoC,IAAnCgC,EAAkC,uDAA1B,GAAI9B,EAAsB,uCACjD,OAAQA,EAAOC,MACb,IAPc,YAQZ,OAAOD,EAAO8B,MAEhB,QACE,OAAOA,ICGEhC,EATC,WAA0C,IAAzCiC,EAAwC,wDAAtB/B,EAAsB,uCACvD,OAAQA,EAAOC,MACb,IAPmB,iBAQjB,OAAO,EACT,QACE,OAAO8B,ICSPC,EAAcC,0BAAgB,CAClClC,QAASmC,EACT/B,QAASgC,EACT/B,MAAOgC,EACPN,MAAOO,EACPN,SAAUO,IAOCC,EAAe,SAACC,GAAD,OAAsBA,EAAMzC,SAC3C0C,EAAa,SAACD,GAAD,OAAsBA,EAAMrC,SAGzCuC,EAAc,SAACF,GAAD,OAAsBA,EAAMT,UAE1CY,EAAmB,SAACH,GAC/B,OACE,YAAIA,EAAMpC,OAAOC,QAAO,SAACC,GAAD,OAAsBA,EAAKsC,MAAQtC,EAAKuC,MAC7DC,cACAC,SAASP,EAAMV,MAAMgB,mBAiCbE,EALDC,sBACZjB,EACAkB,8BAAoBC,0BAAgBC,OCrEzBC,EAAQ,WACnB,IAAMC,EAAWC,cACXxD,EAAUyD,YAAYjB,GAE5B,OACE,4BACEtC,KAAK,SACLwD,UAAU,kBACVC,QAAS,kBAAMJ,ED0CnB,uCAAO,WAAOA,GAAP,eAAAvC,EAAA,6DACLuC,ENjD+B,CAAErD,KAJf,kBMoDb,kBAI2Ba,IAJ3B,OAIGQ,EAJH,OAMHgC,EJrD2C,CAAErD,KALjC,YAKkDG,MIqD5CkB,IAClBgC,EAASpD,EAAW,iBACpBoD,EDzDmC,CAAErD,KAHpB,mBCoDd,kDAUHqD,EAASpD,EAAW,qCAVjB,QAaLoD,EN5DgC,CAAErD,KAJf,mBMmDd,0DAAP,wDCzCI0D,SAAU5D,GAETA,EAAU,aAAe,SCqBjB6D,EA5BsB,SAAC,GAAyB,IAAvBjD,EAAsB,EAAtBA,QAASH,EAAa,EAAbA,OACzC8C,EAAWC,cACTM,EAAsBlD,EAAtBkD,KAAMhB,EAAgBlC,EAAhBkC,KAAMiB,EAAUnD,EAAVmD,MAEpB,OACE,oCACE,yBAAKL,UAAU,WACb,uBAAGA,UAAU,UAAb,2BAEGI,GAEH,2BAAIhB,GACJ,uBAAGY,UAAU,SAAb,aAEGK,GAEH,4BACEL,UAAU,gBACVxD,KAAK,SACLyD,QAAS,kBAAMJ,ENlBI,SAAC9C,EAAgBI,GAAjB,MAAwC,CACnEX,KANqB,kBAOrBO,SACAI,aMegCmD,CAAcvD,EAAQG,EAAQJ,OAHxD,QCROyD,EATsB,SAAC,GAAD,IAAGtD,EAAH,EAAGA,SAAUF,EAAb,EAAaA,OAAb,OACnC,6BAASiD,UAAU,YAAnB,gBAEG/C,EAASD,KAAI,SAACE,GAAD,OACZ,kBAAC,EAAD,CAAaA,QAASA,EAASsD,IAAKtD,EAAQJ,GAAIC,OAAQA,SCa/C0D,EAnBmB,SAAC,GAAgB,IAAD,IAAbxC,OAGxByC,QADTC,EAF8C,EAE9CA,KAAMC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,OAAQC,EAFuB,EAEvBA,MAGzB,OACE,uBAAGd,UAAU,WAAb,YAEGW,EAFH,iBAIGC,EAJH,gBAMGC,EANH,eAQGC,ICOQC,EAjBe,SAAC,GAAD,IAAG9C,EAAH,EAAGA,OAAQhB,EAAX,EAAWA,SAAUF,EAArB,EAAqBA,OAArB,OAC5B,oCACE,yBAAKiD,UAAU,aACb,wBAAIA,UAAU,UAAd,cAEG/B,EAAOmC,MAEV,uBAAGJ,UAAU,SAAb,aAEG/B,EAAOoC,QAGZ,kBAAC,EAAD,CAAUpC,OAAQA,IAClB,kBAAC,EAAD,CAAahB,SAAUA,EAAUF,OAAQA,MCO9BiE,EArBmB,SAAC,GAAc,IAAZnE,EAAW,EAAXA,KAC7BgD,EAAWC,cAEjB,OACE,wBAAIE,UAAU,QACZ,wBAAIA,UAAU,kBACZ,wBAAIA,UAAU,SAASnD,EAAKsC,OAC5B,uBAAGa,UAAU,QAAQnD,EAAKuC,MAC1B,4BACEY,UAAU,gBACVxD,KAAK,SACLyD,QAAS,kBAAMJ,EVXsB,CAAErD,KAL7B,eAKgDO,OUWvBF,EAAKC,OAH1C,KAOA,kBAAC,EAAD,CAAMmB,OAAQpB,EAAKoB,OAAQhB,SAAUJ,EAAKI,SAAUF,OAAQF,EAAKC,QCT1DmE,EARmB,SAAC,GAAD,IAAGtE,EAAH,EAAGA,MAAH,OAChC,oCACGA,EAAMK,KAAI,SAACH,GAAD,OACT,kBAAC,EAAD,CAAUA,KAAMA,EAAM2D,IAAK3D,EAAKC,UCgCvBoE,EAhCH,WACV,IAAMrB,EAAWC,cACXxD,EAAUyD,YAAYjB,GACtBpC,EAAUqD,YAAYf,IAAe,SACrCrC,EAAQoD,YAAYb,GACpBZ,EAAWyB,YAAYd,GAQ7B,OACE,yBAAKe,UAAU,OACb,wBAAIA,UAAU,aAAd,uBACA,4BAAK1D,EAAU,yBAAK0D,UAAU,8BAA8BmB,KAAK,WAAczE,GAC7D,IAAjBC,EAAMyE,QACJ,kBAAC,EAAD,MACF9C,GAEC,2BACE9B,KAAK,OACLwD,UAAU,mBACVqB,SAjBY,SAACC,GAA8C,IACzDC,EAAUD,EAAME,OAAhBD,MAER1B,EVdwC,CAAErD,KAH5B,YAG6C6B,MUczCkD,OAiBhB,kBAAC,EAAD,CAAU5E,MAAOA,MC7BjB8E,EAAO,kBACX,kBAAC,IAAD,CAAUlC,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNmC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.9e08cfe1.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POSTS';\nconst DELETE_COMMENT = 'DELETE_COMMENTS';\n\n// Action creators\nexport const setPosts = (posts: PostProps[]) => ({ type: SET_POSTS, posts });\nexport const deletePost = (postId: number) => ({ type: DELETE_POST, postId });\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst reducer = (posts: PostProps[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    case DELETE_COMMENT:\n      return posts.map(post => ({\n        ...post,\n        comments: post.comments\n          .filter((comment: CommentProps) => comment.id !== action.commentId),\n      }));\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nexport const getPosts = () => {\n  return fetch(`${API_URL}/posts.json`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${API_URL}/users.json`)\n    .then(response => response.json());\n};\n\nexport const getComments = () => {\n  return fetch(`${API_URL}/comments.json`)\n    .then(response => response.json());\n};\n\nexport const getPostsFromServer = async () => {\n  const [postsFromServer, usersFromServer, commentsFromServer] = await Promise.all(\n    [getPosts(), getUsers(), getComments()],\n  );\n\n  const preparedPosts = postsFromServer.map((post: PostProps) => ({\n    ...post,\n    comments: commentsFromServer.filter((comment: CommentProps) => comment.postId === post.id),\n    author: usersFromServer.find((user: UserProps) => user.id === post.userId),\n  }));\n\n  return preparedPosts;\n};\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_QUERY = 'SET_QUERY';\n\n// Action creators\nexport const setQuery = (query: string) => ({ type: SET_QUERY, query });\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst LOAD_COMPLETED = 'LOAD_COMPLETED';\n\n// Action creators\nexport const setIsLoadCompleted = () => ({ type: LOAD_COMPLETED });\n\nconst reducer = (isLoaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n    default:\n      return isLoaded;\n  }\n};\n\nexport default reducer;\n","import {\n  createStore, combineReducers, applyMiddleware, AnyAction,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPosts } from './post';\nimport { getPostsFromServer } from '../helpers/api';\nimport searchReducer from './search';\nimport isLoadReducer, { setIsLoadCompleted } from './isLoadCompleted';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  query: searchReducer,\n  isLoaded: isLoadReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getIsLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\n\nexport const getFilteredPosts = (state: RootState) => {\n  return (\n    [...state.posts].filter((post: PostProps) => (post.title + post.body)\n      .toLowerCase()\n      .includes(state.query.toLowerCase()))\n  );\n};\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n\n    try {\n      const postsFromServer = await getPostsFromServer();\n\n      dispatch(setPosts(postsFromServer));\n      dispatch(setMessage('Load Sucsess'));\n      dispatch(setIsLoadCompleted());\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getIsLoading, loadMessage } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getIsLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      onClick={() => dispatch(loadMessage())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from './store/post';\n\ntype Props = {\n  comment: CommentProps;\n  postId: number;\n};\n\nconst CommentItem: React.FC<Props> = ({ comment, postId }) => {\n  const dispatch = useDispatch();\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <div className=\"comment\">\n        <p className=\"author\">\n          Сomment author:&nbsp;\n          {name}\n        </p>\n        <p>{body}</p>\n        <p className=\"email\">\n          Email:&nbsp;\n          {email}\n        </p>\n        <button\n          className=\"delete-button\"\n          type=\"button\"\n          onClick={() => dispatch(deleteComment(postId, comment.id))}\n        >\n          x\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport CommentItem from './CommentItem';\n\ntype Props = {\n  comments: CommentProps[];\n  postId: number;\n};\n\nconst CommentList: React.FC<Props> = ({ comments, postId }) => (\n  <article className=\"comments\">\n    Comments:&nbsp;\n    {comments.map((comment: CommentProps) => (\n      <CommentItem comment={comment} key={comment.id} postId={postId} />\n    ))}\n  </article>\n);\n\nexport default CommentList;\n","import React from 'react';\n\ntype Props = {\n  author: UserProps;\n};\n\nconst UserInfo: React.FC<Props> = ({ author }) => {\n  const {\n    city, zipcode, street, suite,\n  } = author.address;\n\n  return (\n    <p className=\"address\">\n      City:&nbsp;\n      {city}\n      , zipcode:&nbsp;\n      {zipcode}\n      , street:&nbsp;\n      {street}\n      , suite:&nbsp;\n      {suite}\n    </p>\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport CommentList from './CommentList';\nimport UserInfo from './UserInfo';\n\ntype Props = {\n  author: UserProps;\n  comments: CommentProps[];\n  postId: number;\n};\n\nconst User: React.FC<Props> = ({ author, comments, postId }) => (\n  <>\n    <div className=\"user_info\">\n      <h4 className=\"author\">\n        Author:&nbsp;\n        {author.name}\n      </h4>\n      <p className=\"email\">\n        Email:&nbsp;\n        {author.email}\n      </p>\n    </div>\n    <UserInfo author={author} />\n    <CommentList comments={comments} postId={postId} />\n  </>\n);\n\nexport default User;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport User from './User';\nimport { deletePost } from './store/post';\n\ntype Props = {\n  post: PostProps;\n};\n\nconst PostItem: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ul className=\"list\">\n      <li className=\"list__userInfo\">\n        <h3 className=\"title\">{post.title}</h3>\n        <p className=\"body\">{post.body}</p>\n        <button\n          className=\"delete-button\"\n          type=\"button\"\n          onClick={() => dispatch(deletePost(post.id))}\n        >\n          x\n        </button>\n        <User author={post.author} comments={post.comments} postId={post.id} />\n      </li>\n    </ul>\n  );\n};\n\nexport default PostItem;\n","import React from 'react';\nimport PostItem from './PostItem';\n\ntype Props = {\n  posts: PostProps[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <>\n    {posts.map((post: PostProps) => (\n      <PostItem post={post} key={post.id} />\n    ))}\n  </>\n);\n\nexport default PostList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport { Start } from './components/Start';\nimport {\n  getIsLoading, getMessage, getFilteredPosts, getIsLoaded,\n} from './store';\nimport { setQuery } from './store/search';\nimport PostList from './PostList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getIsLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n  const posts = useSelector(getFilteredPosts);\n  const isLoaded = useSelector(getIsLoaded);\n\n  const handleInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.target as HTMLInputElement;\n\n    dispatch(setQuery(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"display-5\">Redux list of posts</h1>\n      <h2>{loading ? <div className=\"spinner-border text-primary\" role=\"status\" /> : message}</h2>\n      {posts.length === 0\n      && <Start />}\n      {isLoaded\n      && (\n        <input\n          type=\"text\"\n          className=\"form-control mrl\"\n          onChange={handleInput}\n        />\n      )}\n      <PostList posts={posts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}